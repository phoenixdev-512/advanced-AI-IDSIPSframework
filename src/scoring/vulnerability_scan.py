"""
Vulnerability scanning using nmap
"""

import logging
import nmap
from typing import List, Dict, Any, Optional

logger = logging.getLogger(__name__)


class VulnerabilityScanner:
    """Scans devices for security vulnerabilities"""
    
    # Ports considered dangerous if open
    DANGEROUS_PORTS = {
        21: "FTP (unencrypted)",
        23: "Telnet (unencrypted)",
        80: "HTTP (unencrypted web)",
        135: "Windows RPC",
        139: "NetBIOS",
        445: "SMB",
        1433: "MS SQL Server",
        3306: "MySQL",
        3389: "RDP",
        5432: "PostgreSQL",
        5900: "VNC",
        8080: "HTTP Proxy"
    }
    
    def __init__(self, timeout: int = 300):
        """Initialize vulnerability scanner
        
        Args:
            timeout: Scan timeout in seconds
        """
        self.timeout = timeout
        try:
            self.scanner = nmap.PortScanner()
            logger.info("VulnerabilityScanner initialized")
        except nmap.PortScannerError as e:
            logger.error(f"nmap not available: {e}")
            self.scanner = None
    
    def scan_device(self, device_ip: str, quick: bool = True) -> Dict[str, Any]:
        """Scan a device for vulnerabilities
        
        Args:
            device_ip: IP address to scan
            quick: Whether to perform quick scan (common ports only)
            
        Returns:
            Dictionary with scan results
        """
        if not self.scanner:
            logger.warning("nmap not available, skipping scan")
            return {
                'device_ip': device_ip,
                'scan_success': False,
                'error': 'nmap not available'
            }
        
        try:
            logger.info(f"Scanning device {device_ip}")
            
            # Choose scan arguments
            if quick:
                # Scan only dangerous ports
                ports = ','.join(str(p) for p in self.DANGEROUS_PORTS.keys())
                arguments = f'-sV -T4 -p {ports}'
            else:
                # Full scan
                arguments = '-sV -T4 -p-'
            
            # Perform scan
            self.scanner.scan(
                hosts=device_ip,
                arguments=arguments,
                timeout=self.timeout
            )
            
            # Parse results
            if device_ip not in self.scanner.all_hosts():
                return {
                    'device_ip': device_ip,
                    'scan_success': False,
                    'error': 'Host not found'
                }
            
            host_info = self.scanner[device_ip]
            
            # Extract open ports
            open_ports = []
            vulnerable_ports = []
            
            if 'tcp' in host_info:
                for port, port_info in host_info['tcp'].items():
                    if port_info['state'] == 'open':
                        open_ports.append(port)
                        
                        # Check if port is dangerous
                        if port in self.DANGEROUS_PORTS:
                            vulnerable_ports.append(port)
            
            result = {
                'device_ip': device_ip,
                'scan_success': True,
                'hostname': host_info.get('hostnames', [{}])[0].get('name', ''),
                'state': host_info.get('status', {}).get('state', 'unknown'),
                'open_ports': open_ports,
                'vulnerable_ports': vulnerable_ports,
                'vulnerability_details': [
                    {
                        'port': port,
                        'service': self.DANGEROUS_PORTS.get(port, 'Unknown'),
                        'severity': 'high' if port in [21, 23] else 'medium'
                    }
                    for port in vulnerable_ports
                ]
            }
            
            logger.info(f"Scan completed for {device_ip}: "
                       f"{len(open_ports)} open ports, "
                       f"{len(vulnerable_ports)} vulnerable")
            
            return result
            
        except Exception as e:
            logger.error(f"Error scanning device {device_ip}: {e}")
            return {
                'device_ip': device_ip,
                'scan_success': False,
                'error': str(e)
            }
    
    def scan_multiple_devices(self, device_ips: List[str], 
                             quick: bool = True) -> Dict[str, Dict[str, Any]]:
        """Scan multiple devices
        
        Args:
            device_ips: List of IP addresses
            quick: Whether to perform quick scans
            
        Returns:
            Dictionary mapping IPs to scan results
        """
        results = {}
        
        for device_ip in device_ips:
            results[device_ip] = self.scan_device(device_ip, quick=quick)
        
        return results
    
    def get_vulnerability_summary(self, scan_results: Dict[str, Any]) -> str:
        """Generate human-readable vulnerability summary
        
        Args:
            scan_results: Scan results dictionary
            
        Returns:
            Summary string
        """
        if not scan_results.get('scan_success'):
            return f"Scan failed: {scan_results.get('error', 'Unknown error')}"
        
        vulnerable_ports = scan_results.get('vulnerable_ports', [])
        
        if not vulnerable_ports:
            return "No vulnerabilities detected"
        
        details = scan_results.get('vulnerability_details', [])
        summary_lines = [
            f"Found {len(vulnerable_ports)} vulnerable port(s):"
        ]
        
        for detail in details:
            summary_lines.append(
                f"  - Port {detail['port']}: {detail['service']} "
                f"(Severity: {detail['severity']})"
            )
        
        return '\n'.join(summary_lines)
